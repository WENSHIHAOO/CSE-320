000000		;
		; VT52 Simulator Program
		; Also includes insert/delete line/char functions of a
		; Teleray 1061
		;
		
		; For two bits of blank between each character, instead of one,
		; uncomment the next line
		
		;#define WIDTH7 0
		
		call = 170756
		ret = 171013
		ret0 = 171010
		ret2 = 171000
		load = 171215
		
		SIVEC0 = 3004
		SOVEC0 = 3010
		SIVEC1 = 3014
		SOVEC1 = 3020
		LDADDR = 150000
		
		; Interrupt Vectors
		
		. = SIVEC0
003004		
	001167	 mov r7, @sp+
003005	001040	 b intr
	033004	
003007		
		. = SOVEC0
003010		
	001167	 mov r7, @sp+
003011	001040	 b intr
	033010	
003013		
		. = SIVEC1
003014		
	001167	 mov r7, @sp+
003015	001040	 b intr
	033014	
003017		
		. = SOVEC1
003020		
	001167	 mov r7, @sp+
003021	001040	 b intr
	033020	
003023		
		. = LDADDR
150000		
	001000	 b start
	004360	
150002		
	001161	intr: mov r1, @sp+
150003	000061	 gswd r1
150004	001161	 mov r1, @sp+
150005	000003	 dis
150006	000005	 tci
150007	000006	 clrc
150010	001162	 mov r2, @sp+
150011	000261	 mov sp, r1
150012	001471	 sub 4, r1
	000004	
150014	001212	 mov @r1, r2 ; get back old pc
150015	001110	 mov r0, @r1 ; clobber the intru vec info
150016	001472	 sub SIVEC0 + 1, r2
	003005	
150020	000156	 sar 2, r2
150021	001372	 add itable, r2
	150041	
150023	001163	 mov r3, @sp+
150024	001164	 mov r4, @sp+
150025	001165	 mov r5, @sp+
150026	001227	 mov @r2, pc ; branch to service routine
150027		
	001265	iret: mov @-sp, r5
150030	001264	 mov @-sp, r4
150031	001263	 mov @-sp, r3
150032	001262	 mov @-sp, r2
150033	001261	 mov @-sp, r1
150034	000071	 rswd r1
150035	001261	 mov @-sp, r1
150036	001260	 mov @-sp, r0
150037	000002	 eis
150040	001267	 mov @-sp, pc
150041		
	150152	itable: siint0
150042	150201	 soint0
150043	150160	 siint1
150044	150212	 soint1
150045		
		;
		; Serial Interface Driver Routines - with interrupts
		;
		
		B9600 = 0
		B4800 = 40
		B2400 = 100
		B1200 = 140
		B600 = 200
		B300 = 240
		B150 = 300
		B134.5 = 340
		
		NDB1 = 1
		NDB2 = 2
		NSB = 4
		NPB = 10
		POE = 20
		
		TBMT = 1
		ODA = 2
		ROR = 4
		RFE = 10
		RPE = 20
		IEN = 400
		
		STAT0 = 177762
		DATA0 = 177763
		STAT1 = 177764
		DATA1 = 177765
		
	001271	init0: mov STAT0, r1
	177762	
150047	001110	 mov r0, @r1
150050	001000	 jmp ret
	020741	
150052		
	001271	init1: mov STAT1, r1
	177764	
150054	001110	 mov r0, @r1
150055	001000	 jmp ret
	020734	
150057		
	001271	pchr0: mov sobuf0, r1
	150341	
150061	001272	 mov STAT0, r2
	177762	
150063	001000	 b pchr
	000004	
150065		
	001271	pchr1: mov sobuf1, r1
	152357	
150067	001272	 mov STAT1, r2
	177764	
150071		
	000003	pchr: dis
150072	000004	 jsr r5, call
	000760	
	000756	
150075	150246	 putbuf
150076	000004	 jsr r4, sostrt
	000320	
	000223	
150101	000002	 eis
150102	001000	 b ret
	020707	
150104		
	001271	ischr0: mov sibuf0, r1
	150326	
150106	001000	 b ischr
	000002	
150110		
	001271	ischr1: mov sibuf1, r1
	150354	
150112		
	000003	ischr: dis
150113	000004	 jsr r5, call
	000760	
	000756	
150116	150314	 size
150117	000002	 eis
150120	001000	 b ret0
	020666	
150122		
	001271	gchr0: mov sibuf0, r1
	150326	
150124	001000	 b gchr
	000002	
150126		
	001271	gchr1: mov sibuf1, r1
	150354	
150130		
	000003	gchr: dis
150131	000004	 jsr r5, call
	000760	
	000756	
150134	150314	 size
150135	000200	 tst r0
150136	001014	 bnze gch.1
	000003	
150140	000002	 eis
150141	001000	 b ret
	020650	
150143	000004	gch.1: jsr r5, call
	000760	
	000756	
150146	150271	 getbuf
150147	000002	 eis
150150	001000	 b ret0
	020636	
150152		
	001271	siint0: mov sibuf0, r1
	150326	
150154	001272	 mov STAT0, r2
	177762	
150156	001000	 b siint
	000004	
150160		
	001271	siint1: mov sibuf1, r1
	150354	
150162	001272	 mov STAT1, r2
	177764	
150164		
	001220	siint: mov @r2, r0 ; get status register
150165	001670	 and ODA, r0 ; is there a character?
	000002	
150167	001044	 bze iret ; no, return
	000141	
150171	000012	 inc r2 ; address of data register
150172	001220	 mov @r2, r0 ; get character
150173	000004	 jsr r5, call
	000760	
	000756	
150176	150246	 putbuf ; store character
150177	001044	 bze iret ; and return
	000151	
150201		
	001271	soint0: mov sobuf0, r1
	150341	
150203	001272	 mov STAT0, r2
	177762	
150205	000004	 jsr r4, sostrt
	000320	
	000223	
150210	001040	 b iret
	000162	
150212		
	001271	soint1: mov sobuf1, r1
	152357	
150214	001272	 mov STAT1, r2
	177764	
150216	000004	 jsr r4, sostrt
	000320	
	000223	
150221	001040	 b iret
	000173	
150223		
	000004	sostrt: jsr r5, call
	000760	
	000756	
150226	150314	 size ; anything in queue
150227	000200	 tst r0
150230	001004	 bze sos.1 ; no return
	000013	
150232	001220	 mov @r2, r0
150233	001670	 and TBMT, r0 ; UART ready?
	000001	
150235	001004	 bze sos.1 ; no, return
	000006	
150237	000004	 jsr r5, call
	000760	
	000756	
150242	150271	 getbuf
150243	000012	 inc r2 ; get data register address
150244	001120	 mov r0, @r2 ; send data
150245	000247	sos.1: mov r4, pc ; and return
150246		
		.incld buf.16
		;
		; Circular buffer routines
		;
		;	buf:	startptr
		;		endptr
		;		size
		;		.blk	size
		;
		; address of buffer in r1
		
	000214	putbuf:	mov	r1, r4
150247	001241		mov	@r4+, r1
150250	001245		mov	@r4+, r5
150251	001242		mov	@r4+, r2
150252	001150		mov	r0, @r5+	; store data
150253	000250		mov	r5, r0
150254	000440		sub	r4, r0
150255	000520		cmp	r2, r0
150256	001014		bneq	pu.1
	000001	
150260	000245		mov	r4, r5
150261	000515	pu.1:	cmp	r1, r5
150262	001004		beq	ret
	020527	
150264	001474		sub	2, r4
	000002	
150266	001145		mov	r5, @r4+
150267	001000		jmp	ret
	020522	
150271		
	000214	getbuf:	mov	r1, r4
150272	001245		mov	@r4+, r5
150273	001241		mov	@r4+, r1
150274	001242		mov	@r4+, r2
150275	000515		cmp	r1, r5
150276	001004		beq	ret0
	020510	
150300	001250		mov	@r5+, r0
150301	000253		mov	r5, r3
150302	000443		sub	r4, r3
150303	000523		cmp	r2, r3
150304	001014		bneq	ge.1
	000001	
150306	000245		mov	r4, r5
150307	001474	ge.1:	sub	3, r4
	000003	
150311	001145		mov	r5, @r4+
150312	001000		jmp	ret0
	020474	
150314		
	000214	size:	mov	r1, r4
150315	001241		mov	@r4+, r1
150316	001240		mov	@r4+, r0
150317	001242		mov	@r4+, r2
150320	000410		sub	r1, r0
150321	001015		bge	ret0
	020465	
150323	000320		add	r2, r0
150324	001000		b	ret0
	020462	
150326		
	150331	sibuf0: sibuf0 + 3
150327	150331	 sibuf0 + 3
150330	000010	 8.
150331		 . = .+8.
150341		
	150344	sobuf0: sobuf0 + 3
150342	150344	 sobuf0 + 3
150343	000010	 8.
150344		 . = .+8.
150354		
	150357	sibuf1: sibuf1 + 3
150355	150357	 sibuf1 + 3
150356	002000	 1024.
150357		 . = .+1024.
152357		
	152362	sobuf1: sobuf1 + 3
152360	152362	 sobuf1 + 3
152361	000010	 8.
152362		 . = .+1024.
154362		
		;
		; Vt52 Simulator Routines
		;
		
		; Initialize various devices and execute the simulation loop
		
	000003	start: dis
154363	001270	 mov B1200|NDB1|NDB2|NPB|NSB|IEN, r0
	000557	
154365	000004	 jsr r5, call
	000760	
	000756	
154370	150045	 init0
154371	001270	 mov B300|NDB1|NDB2|NPB|NSB|IEN, r0
	000657	
154373	000004	 jsr r5, call
	000760	
	000756	
154376	150052	 init1
154377	000004	 jsr r5, call
	000760	
	000756	
154402	154612	 vinit
154403	000002	 eis
154404	000004	loop: jsr r5, call ; main loop
	000760	
	000756	
154407	154503	 sim
154410	001040	 b loop
	000005	
154412		
		; Idle routine is called when waiting for characters to process
		; It copies from SI0 -> SO1 and redisplays the cursor
		
		BLKCNT = 250.
		
	000004	idle: jsr r5, call
	000760	
	000756	
154415	150104	 ischr0
154416	000200	 tst r0
154417	001014	 bnze idl.1
	000050	
154421	000004	 jsr r5, call
	000760	
	000756	
154424	155663	 vcrdsp
154425	001200	 mov @blink, r0
	156570	
154427	000020	 dec r0
154430	001003	 bpl idl.2
	000016	
154432	001270	 mov BLKCNT, r0
	000372	
154434	001100	 mov r0, @blink
	156570	
154436	001200	 mov @cnoclr, r0
	156565	
154440	000200	 tst r0
154441	001004	 bze ret
	014350	
154443	000700	 clr r0
154444	001100	 mov r0, @cnoclr
	156565	
154446	001000	 b vcdisp
	000535	
154450	001100	idl.2: mov r0, @blink
	156570	
154452	001570	 cmp BLKCNT/2, r0
	000175	
154454	001014	 bneq ret
	014335	
154456	001200	 mov @cnoclr, r0
	156565	
154460	000200	 tst r0
154461	001014	 bnze ret
	014330	
154463	001270	 mov 1, r0
	000001	
154465	001100	 mov r0, @cnoclr
	156565	
154467	001000	 b vcdisp
	000514	
154471	000004	idl.1: jsr r5, call
	000760	
	000756	
154474	150122	 gchr0
154475	000004	 jsr r5, call
	000760	
	000756	
154500	150065	 pchr1
154501	001000	 b ret
	014310	
154503		
		;
		; Simulate the action of a VT52 for one command
		;
		
	000004	sim: jsr r4, vgchr ; If a printing character,
	000330	
	000570	
154506	001670	 and 177, r0 ; don't bother to rediplay cursor
	000177	
154510	001570	 cmp DEL, r0
	000177	
154512	001015	 bge ret
	014277	
154514	001570	 cmp SPACE, r0
	000040	
154516	001005	 blt sim.1
	000006	
154520	000004	 jsr r5, call
	000760	
	000756	
154523	155237	 vccrs
154524	001000	 b vcrt
	000604	
154526	000004	sim.1: jsr r5, call ; We must redisplay cursor
	000760	
	000756	
154531	155663	 vcrdsp ; before processing cursor positioning
154532	001570	 cmp CR, r0 ; commands so we know whether
	000015	
154534	001004	 beq vcr ; we wipe out the cursor or not
	000117	
154536	001570	 cmp LF, r0
	000012	
154540	001004	 beq vlf
	000666	
154542	001570	 cmp TAB, r0
	000011	
154544	001004	 beq vtab
	000251	
154546	001570	 cmp BS, r0
	000010	
154550	001004	 beq vclf
	000623	
154552	001570	 cmp ESC, r0
	000033	
154554	001004	 beq vesc
	000114	
154556	001570	 cmp BEL, r0
	000007	
154560	001004	 beq ret
	014231	
154562	001570	 cmp DC1, r0
	000021	
154564	001004	 beq ret
	014225	
154566	001000	 b ret
	014223	
154570		
	000004	vgchr: jsr r5, call ; Call this to wait for additional
	000760	
	000756	
154573	150110	 ischr1 ; characters in multi-character commands
154574	000200	 tst r0
154575	001014	 bnze vgc.1
	000006	
154577	000004	 jsr r5, call
	000760	
	000756	
154602	154412	 idle
154603	001040	 b vgchr
	000014	
154605	000004	vgc.1: jsr r5, call
	000760	
	000756	
154610	150126	 gchr1
154611	000247	 mov r4, pc
154612		
		;
		; Bitmap Video Display Routines
		;
		
		; NOTE: the following constants have been named to make the
		; code easier to read. This does not automatically mean
		; that they can be changed here without modifying code
		; elsewhere. It is probably safe to change NLINES,
		; VMEM, VSIZE, and NCPL. To change NSPL, NWPS, LSIZE,
		; requies changes to vparm and vchbo.
		
		LSIZE = NSPL * NWPS ; # of words per char line
		NSPL = 10. ; # of scans per char line
		NWPS = 32. ; # of words per scan
		VMEM = 130000 ; start of video memory
		VSIZE = 20000 ; size of video memory
		NLINES = 24. ; number of char lines per screen
		
		NCPL = 85.
		
		
		
		
		SCRREG = 177770
		INTLAC = 1000
		INVERT = 400
		
		CR = 15
		LF = 12
		ESC = 33
		BS = 10
		TAB = 11
		BEL = 7
		DEL = 177
		SPACE = 40
		DC1 = 21
		
		CSLOC = 172506
		
		
		
		
		;
		; Initialize the video display
		;
		
	001270	vinit: mov INVERT, r0 ; zero scroll counter, no inverse video
	000400	
154614	001100	 mov r0, @SCRREG
	177770	
154616	001100	 mov r0, @vidflg
	156566	
154620	000004	 jsr r5, call
	000760	
	000756	
154623	156111	 vclrsc ; clear screen
154624	000700	 clr r0
154625	001100	 mov r0, @scroll ; clear variables
	156555	
154627	001100	 mov r0, @coffs
	156557	
154631	001100	 mov r0, @ocoffs
	156563	
154633	001100	 mov r0, @cchgd
	156564	
154635	001100	 mov r0, @cnoclr
	156565	
154637	001170	 mov r0, chpos
	156567	
154641	001270	 mov VMEM + ((NLINES-1) * LSIZE), r0
	146300	
154643	001100	 mov r0, @cbase
	156556	
154645	001100	 mov r0, @ocbase
	156562	
154647	001270	 mov CSLOC, r0 ; get character set location
	172506	
154651	001100	 mov r0, @csloc
	156560	
154653	001000	 b ret
	014136	
154655		
	000700	vcr: clr r0 ; perform a carriage return
154656	001100	 mov r0, @coffs
	156557	
154660	001100	 mov r0, @chpos
	156567	
154662	001200	 mov @cbase, r0
	156556	
154664	001670	 and ~(NWPS-1), r0
	177740	
154666	001100	 mov r0, @cbase
	156556	
154670	001000	 b vscchg
	000747	
154672		
	000004	vesc: jsr r4, vgchr ; process an ESC command
	000330	
	000570	
154675	001670	 and 177, r0
	000177	
154677	001470	 sub 'A, r0
	000101	
154701	001570	 cmp ecmdtab-cmdtab, r0
	000032	
154703	001001	 blge ret
	014106	
154705	001370	 add cmdtab, r0
	154711	
154707	000201	 mov r0, r1
154710	001217	 mov @r1, pc
154711		
	155256	cmdtab: vcup ; A
154712	155304	 vcdn ; B
154713	155332	 vcrt ; C
154714	155375	 vclf ; D
154715	154750	 vclr ; E
154716	171013	 ret ; F
154717	171013	 ret ; G
154720	154743	 vhome ; H
154721	155502	 vrlf ; I
154722	155037	 vkeos ; J
154723	155072	 vkeol ; K
154724	156150	 viln ; L
154725	156236	 vdln ; M
154726	171013	 ret ; N
154727	171013	 ret ; O
154730	156330	 vichr ; P
154731	156443	 vdchr ; Q
154732	171013	 ret ; R
154733	171013	 ret ; S
154734	171013	 ret ; T
154735	171013	 ret ; U
154736	171013	 ret ; V
154737	171013	 ret ; W
154740	171013	 ret ; X
154741	154762	 vpos ; Y
154742	171013	 ret ; Z
154743		ecmdtab = .
		
	000722	vhome: clr r2 ; home the cursor
154744	001271	 mov NLINES-1, r1
	000027	
154746	001000	 b vcmov
	000221	
154750		
	000004	vclr: jsr r5, call ; home and clear
	000760	
	000756	
154753	154743	 vhome
154754	001270	 mov 1, r0
	000001	
154756	001100	 mov r0, @cnoclr
	156565	
154760	001000	 b vclrsc
	001127	
154762		
	000004	vpos: jsr r4, vgchr ; cursor positioning
	000330	
	000570	
154765	001670	 and 177, r0
	000177	
154767	001470	 sub SPACE, r0
	000040	
154771	000040	 neg r0
154772	001370	 add NLINES-1, r0
	000027	
154774	000201	 mov r0, r1
154775	000004	 jsr r4, vgchr
	000330	
	000570	
155000	001670	 and 177, r0
	000177	
155002	001470	 sub SPACE, r0
	000040	
155004	000202	 mov r0, r2
155005	001571	 cmp NLINES, r1
	000030	
155007	001001	 blge ret
	014002	
155011	001572	 cmp NCPL, r2
	000125	
155013	001001	 blge ret
	013776	
155015	001000	 b vcmov
	000152	
155017		
	001201	vtab: mov @chpos, r1 ; process a tab
	156567	
155021	001671	 and 7, r1
	000007	
155023	000041	 neg r1
155024	001371	 add 8., r1
	000010	
155026	000004	vt.1: jsr r5, call
	000760	
	000756	
155031	155332	 vcrt
155032	000021	 dec r1
155033	001054	 bnze vt.1
	000006	
155035	001000	 b ret
	013754	
155037		
	000700	vkeos: clr r0 ; clear from cursor to end of screen
155040	000004	 jsr r5, vpbase ; first figure out physical address
	000730	
	001603	
155043	000204	 mov r0, r4 ; of logical bottom of screen, then
155044	001200	 mov @cbase, r0 ; number of words from bottom of
	156556	
155046	001670	 and ~(NWPS-1), r0 ; screen to just before line containing
	177740	
155050	000004	 jsr r5, vlbase ; the cursor. Clear this area, then
	000730	
	001622	
155053	001271	 mov 177777, r1 ; call vkeol to clear the line
	177777	
155055	000200	 tst r0 ; containing the cursor
155056	001004	vks.1: bze vkeol
	000012	
155060	001574	 cmp VMEM + VSIZE, r4
	150000	
155062	001011	 bllt vks.2
	000002	
155064	001474	 sub VSIZE, r4
	020000	
155066	001141	vks.2: mov r1, @r4+
155067	000020	 dec r0
155070	001040	 b vks.1
	000013	
155072		
	001201	vkeol: mov @coffs, r1 ; clear from the cursor to end of line
	156557	
155074	001371	 add kmsktb, r1 ; figure out which bits to clear in the
	155151	
155076	001210	 mov @r1, r0 ; word containing the LHS of the cursor,
155077	001271	 mov 177777, r1 ; then process each scan line, first
	177777	
155101	001274	 mov NWPS-1, r4 ; treating the word with the LHS of
	000037	
155103	001203	 mov @cbase, r3 ; the cursor, and then clearing the
	156556	
155105	001275	 mov NSPL, r5 ; rest of the words in the line.
	000012	
155107	001163	vkl.1: mov r3, @sp+
155110	001232	 mov @r3, r2
155111	000032	 com r2
155112	000602	 and r0, r2
155113	000032	 com r2
155114	001132	 mov r2, @r3
155115	000013	vkl.2: inc r3
155116	001163	 mov r3, @sp+
155117	000643	 and r4, r3
155120	001004	 bze vkl.3
	000004	
155122	001263	 mov @-sp, r3
155123	001131	 mov r1, @r3
155124	001040	 b vkl.2
	000010	
155126	001263	vkl.3: mov @-sp, r3
155127	001263	 mov @-sp, r3
155130	001373	 add NWPS, r3
	000040	
155132	001573	 cmp VMEM + VSIZE, r3
	150000	
155134	001011	 bllt vkl.4
	000002	
155136	001473	 sub VSIZE, r3
	020000	
155140	000025	vkl.4: dec r5
155141	001055	 bge vkl.1
	000033	
155143	001270	 mov 1, r0
	000001	
155145	001100	 mov r0, @cnoclr
	156565	
155147	001000	 b vscchg
	000470	
155151		
	000000	kmsktb: .word 000000, 000001, 000003, 000007
	000001	
	000003	
	000007	
155155	000017	 .word 000017, 000037, 000077, 000177
	000037	
	000077	
	000177	
155161	000377	 .word 000377, 000777, 001777, 003777
	000777	
	001777	
	003777	
155165	007777	 .word 007777, 017777, 037777, 077777
	017777	
	037777	
	077777	
155171		
		;
		; move the cursor to horiz (in r2), vert (in r1)
		;
		; Bounds checking must be done by the caller.
		;
		
	001102	vcmov: mov r2, @chpos
	156567	
155173	000004	 jsr r5, call
	000760	
	000756	
155176	155723	 vparm
155177	001101	 mov r1, @coffs
	156557	
155201	001102	 mov r2, @cbase
	156556	
155203	001000	 b vscchg
	000434	
155205		
		;
		; display the cursor
		;
		
	001273	vcdisp: mov SPACE, r3 ; cursor = space
	000040	
155207	001271	 mov 1, r1
	000001	
155211	001101	 mov r1, @cflg
	156561	
155213	001201	 mov @ocoffs, r1
	156563	
155215	001202	 mov @ocbase, r2
	156562	
155217	001000	 b vchbo
	000554	
155221		
	001200	vcclr: mov @cnoclr, r0
	156565	
155223	000200	 tst r0
155224	001014	 bnze ret
	013565	
155226	000004	 jsr r5, vcdisp
	000730	
	001205	
155231	001270	 mov 1, r0
	000001	
155233	001100	 mov r0, @cnoclr
	156565	
155235	001000	 b ret
	013554	
155237		
	001201	vccrs: mov @cchgd, r1 ; place a character at the
	156564	
155241	000211	 tst r1 ; current cursor position
155242	001014	 bnze vcc.1
	000003	
155244	000031	 com r1
155245	001101	 mov r1, @cnoclr
	156565	
155247	000203	vcc.1: mov r0, r3
155250	001201	 mov @coffs, r1
	156557	
155252	001202	 mov @cbase, r2
	156556	
155254	001000	 b vchbo
	000517	
155256		
		;
		; Move the cursor up, down, left, and right, without scrolling
		;
		
	001200	vcup: mov @cbase, r0
	156556	
155260	000202	 mov r0, r2
155261	000004	 jsr r5, vlbase
	000730	
	001622	
155264	001570	 cmp LSIZE * (NLINES-1), r0
	016300	
155266	001001	 blge ret
	013523	
155270	001372	 add LSIZE, r2
	000500	
155272	001572	 cmp VMEM + VSIZE, r2
	150000	
155274	001011	 bllt vcu.1
	000002	
155276	001472	 sub VSIZE, r2
	020000	
155300	001102	vcu.1: mov r2, @cbase
	156556	
155302	001000	 b vscchg
	000335	
155304		
	001200	vcdn: mov @cbase, r0
	156556	
155306	000202	 mov r0, r2
155307	000004	 jsr r5, vlbase
	000730	
	001622	
155312	001570	 cmp LSIZE, r0
	000500	
155314	001011	 bllt ret
	013475	
155316	001472	 sub LSIZE, r2
	000500	
155320	001572	 cmp VMEM, r2
	130000	
155322	001001	 blge vcd.1
	000002	
155324	001372	 add VSIZE, r2
	020000	
155326	001102	vcd.1: mov r2, @cbase
	156556	
155330	001000	 b vscchg
	000307	
155332		
	001200	vcrt: mov @cbase, r0
	156556	
155334	001201	 mov @coffs, r1
	156557	
155336	000202	 mov r0, r2
155337	001672	 and NWPS-1, r2
	000037	
155341	001572	 cmp NWPS-1, r2
	000037	
155343	001005	 blt vcr.1
	000004	
155345		
	001571	 cmp 4, r1
	000004	
155347		
		
		
	001016	 bgt ret
	013442	
155351		
	001371	vcr.1: add 6, r1
	000006	
155353		
		
		
	001571	 cmp 16., r1
	000020	
155355	001005	 blt vcr.2
	000003	
155357	001471	 sub 16., r1
	000020	
155361	000010	 inc r0
155362	001100	vcr.2: mov r0, @cbase
	156556	
155364	001101	 mov r1, @coffs
	156557	
155366	001200	 mov @chpos, r0
	156567	
155370	000010	 inc r0
155371	001100	 mov r0, @chpos
	156567	
155373	001000	 b vscchg
	000244	
155375		
	001200	vclf: mov @coffs, r0
	156557	
155377		
	001470	 sub 6, r0
	000006	
155401		
		
		
	001015	 bge vcl.1
	000014	
155403	001370	 add 16., r0
	000020	
155405	001201	 mov @cbase, r1
	156556	
155407	000212	 mov r1, r2
155410	001672	 and NWPS-1, r2
	000037	
155412	001004	 bze ret
	013377	
155414	000021	 dec r1
155415	001101	 mov r1, @cbase
	156556	
155417	001100	vcl.1: mov r0, @coffs
	156557	
155421	001200	 mov @chpos, r0
	156567	
155423	000020	 dec r0
155424	001100	 mov r0, @chpos
	156567	
155426	001000	 b vscchg
	000211	
155430		
		; Perform line feed function, with scrolling, if necessary
		
	001200	vlf: mov @cbase, r0
	156556	
155432	000201	 mov r0, r1
155433	001471	 sub LSIZE, r1
	000500	
155435	001571	 cmp VMEM, r1
	130000	
155437	001001	 blge vlf.1
	000002	
155441	001371	 add VSIZE, r1
	020000	
155443	001101	vlf.1: mov r1, @cbase
	156556	
155445	000004	 jsr r5, vlbase
	000730	
	001622	
155450	001570	 cmp LSIZE, r0
	000500	
155452	001001	 blge vscchg
	000165	
155454	000004	 jsr r5, call
	000760	
	000756	
155457	156124	 vclrlc
155460	001201	 mov @scroll, r1
	156555	
155462	001471	 sub NSPL, r1
	000012	
155464	001671	 and 377, r1
	000377	
155466	001101	 mov r1, @scroll
	156555	
155470	001701	 xor @vidflg, r1
	156566	
155472	001101	 mov r1, @SCRREG
	177770	
155474	000004	 jsr r5, call
	000760	
	000756	
155477	155554	 vclgap
155500	001000	 b vscchg
	000137	
155502		
		; Perform reverse line feed function, with scrolling
		
	001200	vrlf: mov @cbase, r0
	156556	
155504	000201	 mov r0, r1
155505	001371	 add LSIZE, r1
	000500	
155507	001571	 cmp VMEM + VSIZE, r1
	150000	
155511	001011	 bllt vrl.1
	000002	
155513	001471	 sub VSIZE, r1
	020000	
155515	001101	vrl.1: mov r1, @cbase
	156556	
155517	000004	 jsr r5, vlbase
	000730	
	001622	
155522	001570	 cmp LSIZE * (NLINES-1), r0
	016300	
155524	001011	 bllt vscchg
	000113	
155526	000004	 jsr r5, call
	000760	
	000756	
155531	156124	 vclrlc
155532	001201	 mov @scroll, r1
	156555	
155534	001371	 add NSPL, r1
	000012	
155536	001671	 and 377, r1
	000377	
155540	001101	 mov r1, @scroll
	156555	
155542	001701	 xor @vidflg, r1
	156566	
155544	001101	 mov r1, @SCRREG
	177770	
155546	000004	 jsr r5, call
	000760	
	000756	
155551	155641	 vscchg
155552	001040	 b vclgap
	177777	
155554		
		; Clear the "gap" between the first and last lines of the logical
		; screen.
		
	001270	vclgap: mov NLINES * LSIZE, r0
	017000	
155556	000004	 jsr r5, vpbase
	000730	
	001603	
155561	000204	 mov r0, r4
155562	001271	 mov VSIZE - (NLINES * LSIZE), r1
	001000	
155564	001270	 mov 177777, r0
	177777	
155566	000211	 tst r1
155567	001004	vclg.1: bze ret
	013222	
155571	001574	 cmp VMEM + VSIZE, r4
	150000	
155573	001011	 bllt vclg.2
	000002	
155575	001474	 sub VSIZE, r4
	020000	
155577	001140	vclg.2: mov r0, @r4+
155600	000021	 dec r1
155601	001040	 b vclg.1
	000013	
155603		
	001201	vpbase: mov @scroll, r1 ; convert logical cursor base to physical
	156555	
155605	000115	 sll 2, r1
155606	000115	 sll 2, r1
155607	000111	 sll 1, r1
155610	000310	 add r1, r0
155611	001370	 add VMEM, r0
	130000	
155613	001570	 cmp VMEM + VSIZE, r0
	150000	
155615	001011	 bllt vpb.1
	000002	
155617	001470	 sub VSIZE, r0
	020000	
155621	000257	vpb.1: jmp r5
155622		
	001201	vlbase: mov @scroll, r1 ; convert physical cursor base to logical
	156555	
155624	000115	 sll 2, r1
155625	000115	 sll 2, r1
155626	000111	 sll 1, r1
155627	000410	 sub r1, r0
155630	001570	 cmp VMEM, r0
	130000	
155632	001001	 blge vlb.1
	000002	
155634	001370	 add VSIZE, r0
	020000	
155636	001470	vlb.1: sub VMEM, r0
	130000	
155640	000257	 jmp r5
155641		
	001200	vscchg: mov @ocbase, r0 ; check whether the cursor has changed position
	156562	
155643	001201	 mov @ocoffs, r1
	156563	
155645	001500	 cmp @cbase, r0
	156556	
155647	001014	 bneq vsc.1
	000004	
155651	001501	 cmp @coffs, r1
	156557	
155653	001004	 beq ret
	013136	
155655	001270	vsc.1: mov 1, r0
	000001	
155657	001100	 mov r0, @cchgd
	156564	
155661	001000	 b ret
	013130	
155663		
		;
		; redisplay cursor, if necessary
		;
		
	001200	vcrdsp: mov @cchgd, r0
	156564	
155665	000200	 tst r0
155666	001004	 bze ret
	013123	
155670	000700	 clr r0
155671	001100	 mov r0, @cchgd
	156564	
155673	001200	 mov @cnoclr, r0
	156565	
155675	000200	 tst r0
155676	001004	 bze vcrd.1
	000005	
155700	000700	 clr r0
155701	001100	 mov r0, @cnoclr
	156565	
155703	001000	 b vcrd.2
	000004	
155705	000004	vcrd.1: jsr r5, call
	000760	
	000756	
155710	155205	 vcdisp
155711	001274	vcrd.2: mov cbase, r4
	156556	
155713	001275	 mov ocbase, r5
	156562	
155715	001240	 mov @r4+, r0
155716	001150	 mov r0, @r5+
155717	001240	 mov @r4+, r0
155720	001150	 mov r0, @r5+
155721	001040	 b vcdisp
	000515	
155723		
		;
		; given vert in r1, horiz in r2, compute address of
		; leftmost bottom word of character into
		; r2, and number of bits to shift into r1.
		;
		
	000111	vparm: sll 1, r1 ; mult r1 by NSPL
155724	001161	 mov r1, @sp+
155725	000115	 sll 2, r1
155726	001361	 add @-sp, r1
155727	000111	 sll 1, r1 ; mult by 32.
155730	000115	 sll 2, r1
155731	000115	 sll 2, r1
155732	001161	 mov r1, @sp+ ; save for later
155733		
		
		
	000112	 sll 1, r2
155734		
	001162	 mov r2, @sp+ ; mult r2 by 6
155735		
		
		
	000112	 sll 1, r2
155736	001362	 add @-sp, r2
155737		
		
		
	000711	 clr r1 ; divide r2by16.
155740	000176	 sarc 2, r2 ; put rem in r1
155741	000165	 rrc 2, r1
155742	000176	 sarc 2, r2
155743	000165	 rrc 2, r1
155744	000101	 swap 1, r1
155745	000155	 sar 2, r1
155746	000155	 sar 2, r1
155747	001362	 add @-sp, r2 ; add in rest of
155750	001203	 mov @scroll, r3 ; offset
	156555	
155752	000117	 sll 2, r3
155753	000117	 sll 2, r3
155754	000113	 sll 1, r3
155755	000332	 add r3, r2
155756	001572	 cmp VSIZE, r2
	020000	
155760	001005	 blt vp.1
	000002	
155762	001472	 sub VSIZE, r2
	020000	
155764	001372	vp.1: add VMEM, r2
	130000	
155766	001000	 b ret2
	013010	
155770		
		;
		; put char in r0 on screen at positin r1, r2
		;
		
	000203	vchxy: mov r0, r3 ; save char code
155771	000004	 jsr r5, call
	000760	
	000756	
155774	155723	 vparm
155775	001163	vchbo: mov r3, @sp+
155776	000117	 sll 2, r3
155777	001363	 add @-sp, r3
156000	001303	 add @csloc, r3
	156560	
156002	001161	 mov r1, @sp+ ; save shift count
156003	000214	 mov r1, r4
156004	001275	 mov NSPL, r5 ; scan line count
	000012	
156006		;
		; the following code has:
		; r0, r1: two word data to be shifted
		; r2: pointer into video mmory
		; r3: pointer into char table
		; r4: shift count
		; r5: scan line count
		; IDEA: first clear out old stuff,
		; then XOR in new data. If cflg .ne.0, skip
		; the clearing and just XOR.
		;
	001200	vc.1: mov @cflg, r0
	156561	
156010	000200	 tst r0
156011	001014	 bnze vc.7
	000015	
156013	000241	 mov r4, r1
156014	000111	 sll 1, r1
156015	001371	 add msktab, r1
	156571	
156017	001210	 mov @r1, r0
156020	000011	 inc r1
156021	001211	 mov @r1, r1
156022	001620	vc.3: and @r2, r0
156023	001120	 mov r0, @r2
156024	000012	 inc r2
156025	001621	 and @r2, r1
156026	001121	 mov r1, @r2
156027	000022	 dec r2 ; stuff cleared
156030	001230	vc.7: mov @r3, r0 ; fetch scan line
156031	000251	 mov r5, r1 ; see if odd/even
156032	000171	 sarc 1, r1
156033	001011	 bnc vc.4
	000002	
156035	000100	 swap 1, r0 ; use high half
156036	000013	 inc r3 ; increment pointer
156037	001670	vc.4: and 177, r0
	000177	
156041		
	000150	 sar 1, r0
156042		
	000711	 clr r1 ; prepare to shift
156043	001374	 add 2, r4 ; adjust shift count
	000002	
156045	001474	vc.5: sub 2, r4
	000002	
156047	001004	 bze vc.6
	000010	
156051	001013	 bmi vc.8
	000004	
156053	000134	 sllc 2, r0
156054	000125	 rlc 2, r1
156055	001040	 b vc.5
	000011	
156057	000171	vc.8: sarc 1, r1
156060	000160	 rrc 1, r0
156061	001720	vc.6: xor @r2, r0 ; store new stuff
156062	001120	 mov r0, @r2
156063	000012	 inc r2
156064	001721	 xor @r2, r1
156065	001121	 mov r1, @r2
156066	001264	 mov @-sp, r4
156067	001164	 mov r4, @sp+
156070	001372	 add 37, r2 ; new scan line
	000037	
156072	001572	 cmp VMEM+VSIZE, r2
	150000	
156074	001011	 bllt vc.9
	000002	
156076	001472	 sub VSIZE, r2
	020000	
156100	000025	vc.9: dec r5
156101	001054	 bnze vc.1 ; more lines to do
	000074	
156103	001260	 mov @-sp, r0 ; pop shift count
156104	000700	 clr r0
156105	001100	 mov r0, @cflg
	156561	
156107	001000	 b ret
	012702	
156111		
		;
		; fast way to clear entire screen
		;
		
	001274	vclrsc: mov VMEM, r4
	130000	
156113	001270	 mov 177777, r0
	177777	
156115	001140	vcs.1: mov r0, @r4+
156116	001574	 cmp VMEM+VSIZE, r4
	150000	
156120	001051	 bllt vcs.1
	000004	
156122	001000	 b ret
	012667	
156124		
		;
		; fast way to clear line containing cursor
		;
		
	001204	vclrlc: mov @cbase, r4
	156556	
156126	001674	 and 177740, r4
	177740	
156130	001271	 mov LSIZE, r1
	000500	
156132	001270	 mov 177777, r0
	177777	
156134	001140	vclc.1: mov r0, @r4+
156135	001574	 cmp VMEM+VSIZE, r4
	150000	
156137	001011	 bllt vclc.2
	000002	
156141	001474	 sub VSIZE, r4
	020000	
156143	000021	vclc.2: dec r1
156144	001054	 bnze vclc.1
	000011	
156146	001000	 b ret
	012643	
156150		
		; Insert/Delete Line Functions
		
	000004	viln: jsr r5, call
	000760	
	000756	
156153	155221	 vcclr
156154	001200	 mov @cbase, r0
	156556	
156156	001670	 and ~(NWPS-1), r0
	177740	
156160	000004	 jsr r5, vlbase
	000730	
	001622	
156163	000202	 mov r0, r2
156164	000700	 clr r0
156165	000004	 jsr r5, vpbase
	000730	
	001603	
156170	000204	 mov r0, r4
156171	001271	 mov VMEM + VSIZE, r1
	150000	
156173	001273	 mov VSIZE, r3
	020000	
156175	001370	 add LSIZE, r0
	000500	
156177	000510	 cmp r1, r0
156200	001011	 bllt vil.1
	000001	
156202	000430	 sub r3, r0
156203	000205	vil.1: mov r0, r5
156204	000222	 tst r2
156205	001014	vil.2: bnze vil.9
	000012	
156207	000004	 jsr r5, call
	000760	
	000756	
156212	156124	 vclrlc
156213	001270	 mov 1, r0
	000001	
156215	001100	 mov r0, @cnoclr
	156565	
156217	001040	 b vscchg
	000357	
156221	001250	vil.9: mov @r5+, r0
156222	001140	 mov r0, @r4+
156223	000515	 cmp r1, r5
156224	001011	 bllt vil.3
	000001	
156226	000435	 sub r3, r5
156227	000514	vil.3: cmp r1, r4
156230	001011	 bllt vil.4
	000001	
156232	000434	 sub r3, r4
156233	000022	vil.4: dec r2
156234	001040	 b vil.2
	000030	
156236		
	001200	vdln: mov @cbase, r0
	156556	
156240	001670	 and ~(NWPS-1), r0
	177740	
156242	000202	 mov r0, r2
156243	000004	 jsr r5, vlbase
	000730	
	001622	
156246	000223	 mov r2, r3
156247	001372	 add LSIZE-1, r2
	000477	
156251	000023	 dec r3
156252	001274	 mov VMEM, r4
	130000	
156254	001275	 mov VSIZE, r5
	020000	
156256	000543	 cmp r4, r3
156257	001015	 bge vdl.1
	000001	
156261	000353	 add r5, r3
156262	000200	vdl.1: tst r0
156263	001004	vdl.2: bze vdl.5
	000017	
156265	001231	 mov @r3, r1
156266	001121	 mov r1, @r2
156267	000022	 dec r2
156270	000542	 cmp r4, r2
156271	001001	 blge vdl.3
	000001	
156273	000352	 add r5, r2
156274	000023	vdl.3: dec r3
156275	000543	 cmp r4, r3
156276	001001	 blge vdl.4
	000001	
156300	000353	 add r5, r3
156301	000020	vdl.4: dec r0
156302	001040	 b vdl.2
	000020	
156304	001202	vdl.5: mov @cbase, r2
	156556	
156306	000700	 clr r0
156307	000004	 jsr r5, vpbase
	000730	
	001603	
156312	001100	 mov r0, @cbase
	156556	
156314	000004	 jsr r5, call
	000760	
	000756	
156317	156124	 vclrlc
156320	001102	 mov r2, @cbase
	156556	
156322	001270	 mov 1, r0
	000001	
156324	001100	 mov r0, @cnoclr
	156565	
156326	001040	 b vscchg
	000466	
156330		
		; Insert/Delete Character Functions
		
	000004	vichr: jsr r5, call
	000760	
	000756	
156333	155205	 vcdisp
156334	001201	 mov @coffs, r1
	156557	
156336	001371	 add kmsktb, r1
	155151	
156340	001215	 mov @r1, r5
156341	001273	 mov NSPL, r3
	000012	
156343	001202	 mov @cbase, r2
	156556	
156345	000224	vic.2: mov r2, r4
156346	000014	 inc r4
156347	001220	 mov @r2, r0
156350	000201	 mov r0, r1
156351	000651	 and r5, r1
156352	001161	 mov r1, @sp+
156353	000035	 com r5
156354	000650	 and r5, r0
156355	000035	 com r5
156356	000711	 clr r1
156357	000134	 sllc 2, r0
156360	000125	 rlc 2, r1
156361	000134	 sllc 2, r0
156362	000125	 rlc 2, r1
156363	000134	 sllc 2, r0
156364	000125	 rlc 2, r1
156365		
		
		
		
	001760	 xor @-sp, r0
156366	001120	 mov r0, @r2
156367	001162	 mov r2, @sp+
156370	000242	vic.1: mov r4, r2
156371	001672	 and NWPS-1, r2
	000037	
156373	001004	 bze vic.4
	000022	
156375	000101	 swap 1, r1
156376		
		
		
	000115	 sll 2, r1
156377		
	000722	 clr r2
156400	001240	 mov @r4+, r0
156401	000024	 dec r4
156402	000135	 sllc 2, r1
156403	000124	 rlc 2, r0
156404	000126	 rlc 2, r2
156405	000135	 sllc 2, r1
156406	000124	 rlc 2, r0
156407	000126	 rlc 2, r2
156410	000135	 sllc 2, r1
156411	000124	 rlc 2, r0
156412	000126	 rlc 2, r2
156413		
		
		
		
		
	001140	 mov r0, @r4+
156414	000221	 mov r2, r1
156415	001040	 b vic.1
	000026	
156417	001262	vic.4: mov @-sp, r2
156420	000023	 dec r3
156421	001004	 bze vic.3
	000012	
156423	001372	 add NWPS, r2
	000040	
156425	001572	 cmp VMEM + VSIZE, r2
	150000	
156427	001051	 bllt vic.2
	000063	
156431	001472	 sub VSIZE, r2
	020000	
156433	001040	 b vic.2
	000067	
156435	001270	vic.3: mov 1, r0
	000001	
156437	001100	 mov r0, @cnoclr
	156565	
156441	001040	 b vscchg
	000601	
156443		
	001201	vdchr: mov @coffs, r1
	156557	
156445	001371	 add kmsktb, r1
	155151	
156447	001215	 mov @r1, r5
156450	001274	 mov NSPL, r4
	000012	
156452	001202	 mov @cbase, r2
	156556	
156454	001271	vdc.4: mov 177777, r1
	177777	
156456	000223	 mov r2, r3
156457	001673	 and ~(NWPS-1), r3
	177740	
156461	001773	 xor NWPS-1, r3
	000037	
156463	000532	vdc.2: cmp r3, r2
156464	001004	 beq vdc.1
	000024	
156466	001162	 mov r2, @sp+
156467	001230	 mov @r3, r0
156470	000722	 clr r2
156471	000175	 sarc 2, r1
156472	000164	 rrc 2, r0
156473	000166	 rrc 2, r2
156474	000175	 sarc 2, r1
156475	000164	 rrc 2, r0
156476	000166	 rrc 2, r2
156477	000175	 sarc 2, r1
156500	000164	 rrc 2, r0
156501	000166	 rrc 2, r2
156502		
		
		
		
		
	001130	 mov r0, @r3
156503	000102	 swap 1, r2
156504		
		
		
	000156	 sar 2, r2
156505		
	000221	 mov r2, r1
156506	000023	 dec r3
156507	001262	 mov @-sp, r2
156510	001040	 b vdc.2
	000026	
156512	001162	vdc.1: mov r2, @sp+
156513	001230	 mov @r3, r0
156514	000202	 mov r0, r2
156515	000650	 and r5, r0
156516	000175	 sarc 2, r1
156517	000166	 rrc 2, r2
156520	000175	 sarc 2, r1
156521	000166	 rrc 2, r2
156522	000175	 sarc 2, r1
156523	000166	 rrc 2, r2
156524		
		
		
		
	000035	 com r5
156525	000652	 and r5, r2
156526	000035	 com r5
156527	000702	 xor r0, r2
156530	001132	 mov r2, @r3
156531	001262	 mov @-sp, r2
156532	000024	 dec r4
156533	001004	 bze vdc.3
	000012	
156535	001372	 add NWPS, r2
	000040	
156537	001572	 cmp VMEM + VSIZE, r2
	150000	
156541	001051	 bllt vdc.4
	000066	
156543	001372	 add VSIZE, r2
	020000	
156545	001040	 b vdc.4
	000072	
156547	001270	vdc.3: mov 1, r0
	000001	
156551	001100	 mov r0, @cnoclr
	156565	
156553	001040	 b vscchg
	000713	
156555		
		; global video data
		
	000000	scroll: .word 0 ; current scroll counter
156556	000000	cbase: .word 0 ; cursor base
156557	000000	coffs: .word 0 ; offset in bits
156560	000000	csloc: .word 0 ; loc of cs table
156561	000000	cflg: .word 0 ; clear or not?
156562	000000	ocbase: .word 0 ; old cursor base
156563	000000	ocoffs: .word 0 ; old cursor offset
156564	000000	cchgd: .word 0 ; has cursor position changed?
156565	000000	cnoclr: .word 0 ; need to clear old cursor
156566	000000	vidflg: .word 0 ; video status flags
156567	000000	chpos: .word 0 ; cursor horizontal position
156570	000000	blink: .word 0 ; cursor blink counter
156571		
		
	177700	msktab: .word 177700, 177777, 177601, 177777
	177777	
	177601	
	177777	
156575	177403	 .word 177403, 177777, 177007, 177777
	177777	
	177007	
	177777	
156601	176017	 .word 176017, 177777, 174037, 177777
	177777	
	174037	
	177777	
156605	170077	 .word 170077, 177777, 160177, 177777
	177777	
	160177	
	177777	
156611	140377	 .word 140377, 177777, 100777, 177777
	177777	
	100777	
	177777	
156615	001777	 .word 001777, 177777, 003777, 177776
	177777	
	003777	
	177776	
156621	007777	 .word 007777, 177774, 017777, 177770
	177774	
	017777	
	177770	
156625	037777	 .word 037777, 177760, 077777, 177760
	177760	
	077777	
	177760	
156631		

Symbol Table

B1200    =	000140	B134.5   =	000340	B150     =	000300	
B2400    =	000100	B300     =	000240	B4800    =	000040	
B600     =	000200	B9600    =	000000	BEL      =	000007	
BLKCNT   =	000372	BS       =	000010	CR       =	000015	
CSLOC    =	172506	DATA0    =	177763	DATA1    =	177765	
DC1      =	000021	DEL      =	000177	ESC      =	000033	
IEN      =	000400	INTLAC   =	001000	INVERT   =	000400	
LDADDR   =	150000	LF       =	000012	LSIZE    =	000500	
NCPL     =	000125	NDB1     =	000001	NDB2     =	000002	
NLINES   =	000030	NPB      =	000010	NSB      =	000004	
NSPL     =	000012	NWPS     =	000040	ODA      =	000002	
POE      =	000020	RFE      =	000010	ROR      =	000004	
RPE      =	000020	SCRREG   =	177770	SIVEC0   =	003004	
SIVEC1   =	003014	SOVEC0   =	003010	SOVEC1   =	003020	
SPACE    =	000040	STAT0    =	177762	STAT1    =	177764	
TAB      =	000011	TBMT     =	000001	VMEM     =	130000	
VSIZE    =	020000	blink    =	156570	call     =	170756	
cbase    =	156556	cchgd    =	156564	cflg     =	156561	
chpos    =	156567	cmdtab   =	154711	cnoclr   =	156565	
coffs    =	156557	csloc    =	156560	ecmdtab  =	154743	
gch.1    =	150143	gchr     =	150130	gchr0    =	150122	
gchr1    =	150126	ge.1     =	150307	getbuf   =	150271	
idl.1    =	154471	idl.2    =	154450	idle     =	154412	
init0    =	150045	init1    =	150052	intr     =	150002	
iret     =	150027	ischr    =	150112	ischr0   =	150104	
ischr1   =	150110	itable   =	150041	kmsktb   =	155151	
load     =	171215	loop     =	154404	msktab   =	156571	
ocbase   =	156562	ocoffs   =	156563	pchr     =	150071	
pchr0    =	150057	pchr1    =	150065	pu.1     =	150261	
putbuf   =	150246	ret      =	171013	ret0     =	171010	
ret2     =	171000	scroll   =	156555	sibuf0   =	150326	
sibuf1   =	150354	siint    =	150164	siint0   =	150152	
siint1   =	150160	sim      =	154503	sim.1    =	154526	
size     =	150314	sobuf0   =	150341	sobuf1   =	152357	
soint0   =	150201	soint1   =	150212	sos.1    =	150245	
sostrt   =	150223	start    =	154362	vc.1     =	156006	
vc.3     =	156022	vc.4     =	156037	vc.5     =	156045	
vc.6     =	156061	vc.7     =	156030	vc.8     =	156057	
vc.9     =	156100	vcc.1    =	155247	vcclr    =	155221	
vccrs    =	155237	vcd.1    =	155326	vcdisp   =	155205	
vcdn     =	155304	vchbo    =	155775	vchxy    =	155770	
vcl.1    =	155417	vclc.1   =	156134	vclc.2   =	156143	
vclf     =	155375	vclg.1   =	155567	vclg.2   =	155577	
vclgap   =	155554	vclr     =	154750	vclrlc   =	156124	
vclrsc   =	156111	vcmov    =	155171	vcr      =	154655	
vcr.1    =	155351	vcr.2    =	155362	vcrd.1   =	155705	
vcrd.2   =	155711	vcrdsp   =	155663	vcrt     =	155332	
vcs.1    =	156115	vcu.1    =	155300	vcup     =	155256	
vdc.1    =	156512	vdc.2    =	156463	vdc.3    =	156547	
vdc.4    =	156454	vdchr    =	156443	vdl.1    =	156262	
vdl.2    =	156263	vdl.3    =	156274	vdl.4    =	156301	
vdl.5    =	156304	vdln     =	156236	vesc     =	154672	
vgc.1    =	154605	vgchr    =	154570	vhome    =	154743	
vic.1    =	156370	vic.2    =	156345	vic.3    =	156435	
vic.4    =	156417	vichr    =	156330	vidflg   =	156566	
vil.1    =	156203	vil.2    =	156205	vil.3    =	156227	
vil.4    =	156233	vil.9    =	156221	viln     =	156150	
vinit    =	154612	vkeol    =	155072	vkeos    =	155037	
vkl.1    =	155107	vkl.2    =	155115	vkl.3    =	155126	
vkl.4    =	155140	vks.1    =	155056	vks.2    =	155066	
vlb.1    =	155636	vlbase   =	155622	vlf      =	155430	
vlf.1    =	155443	vp.1     =	155764	vparm    =	155723	
vpb.1    =	155621	vpbase   =	155603	vpos     =	154762	
vrl.1    =	155515	vrlf     =	155502	vsc.1    =	155655	
vscchg   =	155641	vt.1     =	155026	vtab     =	155017	

